#+TITLE: Andrew Schwartzmeyer's Emacs configurations
[[https://travis-ci.org/andschwa/.emacs.d][https://travis-ci.org/andschwa/.emacs.d.svg?branch=master]]

Utilizes [[https://github.com/jwiegley/use-package][jwiegley's use-package]] macro to cleanly and quickly require,
install via package.el, and setup various extensions. Enables lots of
lovely minor modes, and conditionally loads operating and local system
specific code.

Note: Magit and Solarized are tracked as submodules.

* Notable packages
- [[https://github.com/emacs-helm/helm/][Helm]]
- [[https://github.com/magit/magit][Magit]]
- [[https://github.com/bbatsov/projectile][bbatsov's Projectile]]
- [[https://github.com/bbatsov/solarized-emacs/][bbatsov's Solarized theme]]
- [[https://github.com/Bruce-Connor/smart-mode-line/][Bruce-Connor's smart-mode-line]]
- [[https://github.com/jwiegley/use-package][jwiegley's use-package]]
- [[https://company-mode.github.io/][dgutov's company-mode]]
- [[https://github.com/magnars/expand-region.el][magnar's expand-region]]
- [[https://github.com/abo-abo/ace-window][abo-abo's ace-window]]
- [[https://github.com/flycheck/flycheck][lunaryon's flycheck]]
- [[http://www.ledger-cli.org/3.0/doc/ledger-mode.html][ledger-cli's ledger-mode]]
- [[http://www.dr-qubit.org/emacs.php#undo-tree][dr-qubit's undo-tree-mode]]
- [[https://github.com/capitaomorte/yasnippet][capitaomorte's yasnippet]]
* Tricks and tips
** Comment/uncomment a region with =M-;=, otherwise start comment
** "Close" client buffer =C-x # (server-edit)=
** Evaluate lisp code on buffer =M-:=
- use =eval-expression=
** Using quote marks within verbatim/code markup in org-mode
- Unicode: <U200B> /xe2/x80/x8b ZERO WIDTH SPACE
- Insert using: (C-x 8 RET 200b RET)
** Quickly inserting =#+begin_src=
- http://orgmode.org/org.html#Easy-Templates
- Type "<s" then tab-complete
** Sudo mode using Tramp
- http://www.emacswiki.org/emacs/TrampMode
- C-x C-f /ssh:you@remotehost|sudo:remotehost:/path/to/file RET
** Replace in files
From [[https://stackoverflow.com/a/271136][StackOverflow]]:

1. M-x find-name-dired: you will be prompted for a root directory and
   a filename pattern.

2. Press t to "toggle mark" for all files found.

3. Press Q for "Query-Replace in Files...": you will be prompted for
   query/substitution regexps.

4. Proceed as with query-replace-regexp: SPACE to replace and move to
   next match, n to skip a match, etc.

5. Press Y to finish replacing in all buffers.

6. C-x C-s ! to save all buffers.

** Replace with capture regexp
- use regex groups like "ab\(c\)" where the parentheses are escaped
  because Emacs
- refer to prior capture groups by \N where N is 1-indexed on the
  captured groups (e.g. back reference)
** Renumber with regexp
- see [[http://www.emacswiki.org/emacs/RenumberList][Wiki]]; the comma indicates elisp code to evaluate
- e.g. [0-9]+ -> \,(+ 257 \#)
- or by 8 starting at 10 \,(+ 10 (* 8 \#))
** Capture all regexp matches
#+begin_src elisp
  ;; captures all non-terminals in Bison grammar
  (save-excursion
    (while (re-search-forward "^\\([a-z_]+\\):" nil t)
      (princ (format "%s " (match-string 1)) (get-buffer-create "matches"))))
#+end_src
** regexp-builder for replace
- Use =C-c C-i= and choose the "string" syntax
- Copy the regexp without the surrounding quotes
- Use =C-c C-q= to close regexp-builder
** Setting fill prefix
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Prefix.html][Fill-Prefix]] (C-x .) with point after prefix
** Helm commands
- =r= for regexp, =<tab>= to jump
- =b= for resume
- =C-o= to move to next input source
** Projectile commands
*** Project
- switch :: p
- commander :: m
- command :: !
- async :: &
- make :: c
- make test :: P
- make tags :: R
- replace :: r
- dired :: D
- vcs :: v
- ag :: ss
- tag :: j
- buffers :: b
- kill :: k
- recent :: e
*** File
- alternate :: a
- test files :: T
- toggle test :: t
** Flycheck
*** =(flycheck-compile)= for debugging
** ansi-term
- Needs [[https://stackoverflow.com/a/8920373][terminfo]]
- Remove TERM from shell's rc file
#+begin_src sh
tic -o ~/.terminfo
/usr/local/Cellar/emacs/HEAD/share/emacs/24.4.50/etc/e/eterm-color.ti
#+end_src

** Quoting characters =C-q=
- newline :: C-j
** Find package code =find-library=
** Partially evaluate list elements
- (add-to-list 'somelist `(symbol . ,(expression to be evaluated)))
- The backquote is like a normal quote except it evaluates elements
  marked with
  commas. [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][RTFM]]
** Temporarily disable ido-completion =C-j=
** Set directory local variable =eval= to execute arbitrary code
** Adding arguments to interactive commands
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Interactive.html#Using-Interactive][using]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes][codes]]
** Useful Elisp functions
- =some-minor-mode= enables a mode when the argument is nil or
  positive and disables when zero or negative
- =add-hook= and =eval-after-load= for conditional execution
- =expand-file-name= and =f-expand= for filename expansion
- =file-name-basename= and =file-name-nondirectory= etc.
- =message= and =princ= for printing
- =get-buffer-create= for buffers
- =add-to-list=, =append= and =list= for lists
- =concat= and =format= for strings
- =getenv=, =setenv=, =compilation-environment= for env
- =executable-find= for binaries
- =ielm= Inferior Elisp REPL
- =cadr= for last item, as in, =(car (cdr foo))=
- =nth= and =elt=
** View Lossage
Use =M-x view-lossage= to see the most recent 300 keystrokes, per
[[http://emacsredux.com/blog/2014/12/23/lossage/][Emacs Redux]]
* Compiling Emacs from source
** Update
#+BEGIN_SRC sh
  git checkout emacs-24 && git pull
#+END_SRC
** Prepare
See =INSTALL.REPO=
#+BEGIN_SRC sh
  make distclean
#+END_SRC
*** CentOS 7
#+BEGIN_SRC sh
  yum install gtk2-devel freetype gnutls-devel
#+END_SRC
** Configure
*** OS X
#+BEGIN_SRC sh
  ./configure --prefix=$HOME --without-all --with-x-toolkit=no --with-ns --with-toolkit-scroll-bars
#+END_SRC
*** CentOS 7
#+BEGIN_SRC sh
  ./configure --prefix=$HOME --without-all --with-xft
#+END_SRC
- [[http://www.x.org/releases/X11R7.7/doc/xorg-docs/fonts/fonts.html][XFT]] is the X11 font system, and is required.
- [[http://jmason.org/howto/subpixel.html][Sub-pixel rendering]]
*** Optional
#+BEGIN_SRC sh
  --with-sound --with-gnutls --with-zlib --without-compress-install --with-libotf
#+END_SRC
** Build
#+BEGIN_SRC sh
  make boostrap
  make install
#+END_SRC
** Artifacts
*** OS X
nextstep/Emacs.app
** Redownload packages
#+BEGIN_SRC sh
  rm -rf ~/.emacs.d/elpa
#+END_SRC
* Deprecated configurations
** ERC
#+begin_src elisp
  ;; erc
  (setq irc-freenode-pass "password"
        erc-prompt-for-nickserv-password nil
        erc-nickserv-passwords `((freenode (("username" . ,irc-freenode-pass))))
        erc-notify-list '("friend")
        erc-autojoin-channels-alist '(("freenode.net" "#emacs")))

  (defun erc-freenode ()
    (interactive)
    (erc-tls :server "chat.freenode.net" :port 7000 :nick "user" :password irc-freenode-pass :full-name "Me"))

#+end_src
** Jabber
#+begin_src elisp
  ;; jabber
  (use-package jabber
    :config (setq jabber-account-list
                  '(("user@server.com"
                     (:password . "password")
                     (:network-server . "server.com")
                     (:port . 5222)
                     (:connection-type . starttls))))
    :bind ("C-x j" . jabber-connect-all))
#+end_src
** ZNC
#+begin_src elisp
  ;; irc
  (use-package znc
    :init (customize-set-variable
           'znc-servers
           (quote
            (("server.com" 7000 t
              ((server "user" "password"))))))
    :bind ("C-c e s" . znc-all))

#+end_src
