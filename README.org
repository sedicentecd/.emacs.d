#+TITLE: Andrew Schwartzmeyer's Emacs configurations
[[https://travis-ci.org/andschwa/.emacs.d][https://travis-ci.org/andschwa/.emacs.d.svg?branch=master]]

Utilizes [[https://github.com/jwiegley/use-package][jwiegley's use-package]] macro to cleanly and quickly require,
install via `package.el`, and setup various extensions. Enables lots of
lovely minor modes, and conditionally loads operating and local system
specific code.

* Notable packages
- [[https://github.com/magit/magit][Magit]] is a Git Porcelain
- [[https://www.emacswiki.org/emacs/Evil][Evil]] for Vim emulation
- [[https://github.com/bbatsov/projectile][Projectile]] to manage and interact with projects
- [[https://github.com/jwiegley/use-package][use-package]] organizes =init.el= and manages packages
- [[https://company-mode.github.io/][Company]] is the best auto-completion framework
- [[https://github.com/flycheck/flycheck][Flycheck]] provides on-the-fly syntax and compilation checking
- [[http://www.ledger-cli.org/3.0/doc/ledger-mode.html][Ledger]] because double-entry bookkeeping is all the rage
- [[http://www.dr-qubit.org/emacs.php#undo-tree][Undo Tree]] records edits as a traversable graph
- [[https://github.com/lewang/ws-butler][Whitespace Butler]] unobtrusively cleans up whitespace
- [[https://github.com/capitaomorte/yasnippet][YASnippet]] is a great template system
* Tricks and tips
** Global mark: push =C-SPC C-SPC= pop =C-x C-SPC=
Recording because =C-x C-@= is horrible.
** Narrowing =C-x n= region =n= defun =d= widen =w=
https://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html#Narrowing
** Zap to char =M-z=
** Sexps: mark =C-M-SPC= kill =C-M-k=
** Defuns: move =C-M-a= =C-M-e= mark =C-M-h=
** The opposite of =C-l= is =M-r=
** Comment DWIM =M-;=
** Select nearest symbol with =M-s .=
** "Close" client buffer =C-x # (server-edit)=
** Evaluate lisp code on buffer =M-:=
- use =eval-expression=
** Setting fill prefix =C-x .=
-
  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Prefix.html][Fill-Prefix]] with point after prefix
** Setting fill column =C-x f=
** Using quote marks within verbatim/code markup in org-mode
- Unicode: <U200B> /xe2/x80/x8b ZERO WIDTH SPACE
- Insert using: (C-x 8 RET 200b RET)
** Quickly insert =#+begin_src= with =<s <tab>=
- http://orgmode.org/org.html#Easy-Templates
** Sudo mode using Tramp =C-x C-f /ssh:you@host|sudo:host:/file=
- http://www.emacswiki.org/emacs/TrampMode
** Rename files in dired =C-x C-q=
** Replace in files
From [[https://stackoverflow.com/a/271136][StackOverflow]]:

1. M-x find-name-dired: you will be prompted for a root directory and
   a filename pattern.

2. Press t to "toggle mark" for all files found.

3. Press Q for "Query-Replace in Files...": you will be prompted for
   query/substitution regexps.

4. Proceed as with query-replace-regexp: SPACE to replace and move to
   next match, n to skip a match, etc.

5. Press Y to finish replacing in all buffers.

6. C-x C-s ! to save all buffers.

** Replace with capture regexp
- use regex groups like "ab\(c\)" where the parentheses are escaped
  because Emacs
- refer to prior capture groups by \N where N is 1-indexed on the
  captured groups (e.g. back reference)
** Renumber with regexp
- see [[http://www.emacswiki.org/emacs/RenumberList][Wiki]]; the comma indicates elisp code to evaluate
- e.g. [0-9]+ -> \,(+ 257 \#)
- or by 8 starting at 10 \,(+ 10 (* 8 \#))
** Capture all regexp matches
#+begin_src elisp
  ;; captures all non-terminals in Bison grammar
  (save-excursion
    (while (re-search-forward "^\\([a-z_]+\\):" nil t)
      (princ (format "%s " (match-string 1)) (get-buffer-create "matches"))))
#+end_src
** regexp-builder for replace
- Use =C-c C-i= and choose the "string" syntax
- Copy the regexp without the surrounding quotes
- Use =C-c C-q= to close regexp-builder
** Projectile commands
*** Project
- switch :: p
- commander :: m
- command :: !
- async :: &
- make :: c
- make test :: P
- make tags :: R
- replace :: r
- dired :: D
- vcs :: v
- ag :: ss
- tag :: j
- buffers :: b
- kill :: k
- recent :: e
*** File
- alternate :: a
- test files :: T
- toggle test :: t
** Flycheck
*** =(flycheck-compile)= for debugging
** ansi-term
- Needs [[https://stackoverflow.com/a/8920373][terminfo]]
- Remove TERM from shell's rc file
#+begin_src sh
tic -o ~/.terminfo
/usr/local/Cellar/emacs/HEAD/share/emacs/24.4.50/etc/e/eterm-color.ti
#+end_src

** Quoting characters =C-q=
- newline :: C-j
** Partially evaluate list elements
- (add-to-list 'somelist `(symbol . ,(expression to be evaluated)))
- The backquote is like a normal quote except it evaluates elements
  marked with
  commas. [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][RTFM]]
** Temporarily disable ido-completion =C-j=
** Set directory local variable =eval= to execute arbitrary code
** Adding arguments to interactive commands
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Interactive.html#Using-Interactive][using]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes][codes]]
** Useful Elisp functions
- =some-minor-mode= enables a mode when the argument is nil or
  positive and disables when zero or negative
- =add-hook= and =eval-after-load= for conditional execution
- =expand-file-name= and =f-expand= for filename expansion
- =file-name-basename= and =file-name-nondirectory= etc.
- =message= and =princ= for printing
- =get-buffer-create= for buffers
- =add-to-list=, =append= and =list= for lists
- =mapcar= with list of results
- =mapconcat= for string of results
- =dolist= for mapc with implicit bind
- =concat= and =format= for strings
- =cadr= for last item of pair, as in, =(car (cdr foo))=
- =cons= to append without copying
- =remove= to filter items from list
- =getenv=, =setenv=, =compilation-environment= for env
- =executable-find= for binaries
- =ielm= Inferior Elisp REPL
- =nth= and =elt=
- =find-library= to open library's code
- =cond= is better than =if= / =else=
- =let= for friendly names should be used liberally
- =save-excursion= to restore point
** View Lossage
Use =M-x view-lossage= to see the most recent 300 keystrokes, per
[[http://emacsredux.com/blog/2014/12/23/lossage/][Emacs Redux]]
** Smartparens
https://ebzzry.github.io/emacs-pairs.html
* Compiling Emacs from source
See =INSTALL.REPO=
** update
#+BEGIN_SRC sh
  git clone --depth 1 -b emacs-24 git://git.sv.gnu.org/emacs.git
#+END_SRC
** prepare
Can use =build-dep emacs= to get dependencies.
#+BEGIN_SRC sh
  make distclean
#+END_SRC
*** Arch
#+BEGIN_SRC sh
  sudo pacman -S texinfo libxft
  # with GTK
  sudo pacman -S gtk2 xorg-fonts-100dpi
#+END_SRC
*** CentOS 7
GTK+ and FreeType are needed to for the X11 build with proper font
rendering. See other notes for X11 and Xft setup.
#+BEGIN_SRC sh
  yum install gtk2-devel freetype gnutls-devel
#+END_SRC
*** Ubuntu 14.04
Still needs GTK and FreeType.
#+BEGIN_SRC sh
  sudo apt-get install texi2html texinfo
#+END_SRC
*** Windows
**** Follow nt/INSTALL
- Install MinGW and MSYS (see [[http://mingw.org/wiki/Getting_Started][Getting Started]])
- Run =C:\MinGW\msys\1.0\postinstall\pi.bat= to setup =fstab=
- Add shortcut to =C:\MinGW\msys\1.0\msys.bat=
**** Fix line endings
Otherwise =autoreconf= will fail cryptically.
#+BEGIN_SRC sh
  dos2unix.exe configure.ac
#+END_SRC
** autoreconf
#+BEGIN_SRC sh
  ./autogen.sh
#+END_SRC
This runs the usual =autoreconf -i -I m4=
** configure
*** Arch
#+BEGIN_SRC sh
  ./configure --without-all --with-x-toolkit=no --with-xft --with-makeinfo
#+END_SRC
*** OS X
#+BEGIN_SRC sh
  ./configure --without-all --with-x-toolkit=no --with-ns --with-toolkit-scroll-bars --with-makeinfo
#+END_SRC
*** CentOS 7
#+BEGIN_SRC sh
  ./configure --without-all --with-xft --with-makeinfo
#+END_SRC
- [[http://www.x.org/releases/X11R7.7/doc/xorg-docs/fonts/fonts.html][XFT]] is the X11 font system, and is required.
- [[http://jmason.org/howto/subpixel.html][Sub-pixel rendering]]
*** Ubuntu 14.04
#+BEGIN_SRC sh
  ./configure --without-all --with-xft --with-makeinfo
#+END_SRC
*** Windows
Toolkit scroll-bars are required on Windows but excluded by
=--without-all=, so explicitly include them.
#+BEGIN_SRC sh
  ./configure --without-all --with-w32 --with-toolkit-scroll-bars
#+END_SRC
*** Optional
#+BEGIN_SRC sh
  --with-sound --with-gnutls --with-zlib --without-compress-install --with-libotf
#+END_SRC
** make
*** bootstrap
#+BEGIN_SRC sh
  make bootstrap
#+END_SRC
*** build docs
#+BEGIN_SRC sh
  make info doc
#+END_SRC
** install
#+BEGIN_SRC sh
  sudo make install install-info install-doc
#+END_SRC
*** OS X
Copy =nextstep/Emacs.app= to desired location
** post-install
*** Remove old packages
#+BEGIN_SRC sh
  rm -rf ~/.emacs.d/elpa
#+END_SRC
