#+TITLE: Andrew Schwartzmeyer's Emacs configurations
[[https://travis-ci.org/andschwa/.emacs.d][https://travis-ci.org/andschwa/.emacs.d.svg?branch=master]]

Utilizes [[https://github.com/jwiegley/use-package][jwiegley's use-package]] macro to cleanly and quickly require,
install via [[https://github.com/raxod502/straight.el][straight.el]], and setup various extensions. Tries to get
back to the basics, and so is loosely based on [[https://masteringemacs.org/][Mastering Emacs]].

* Notable packages
- [[https://github.com/magit/magit][Magit]] is the best way to interact with Git
- [[https://github.com/jwiegley/use-package][use-package]] organizes =init.el= and manages packages
- [[https://github.com/raxod502/straight.el][straight.el]] replaces =package.el= with Git repos
- [[https://github.com/jscheid/dtrt-indent][dtrt-indent]] intelligently guesses indentation rules
- [[https://github.com/tarsius/hl-todo][hl-todo]] highlights TODOs in source code
- [[https://github.com/justbur/emacs-which-key][which-key]] makes keybindings actually discoverable
- [[https://github.com/lewang/ws-butler][Whitespace Butler]] unobtrusively cleans up whitespace
* Elisp
** =add-hook= and =eval-after-load= for conditional execution
** =expand-file-name= and =f-expand= for filename expansion
** =file-name-basename= and =file-name-nondirectory= etc.
** =message= and =princ= for printing
** =concat= and =format= for strings
** =get-buffer-create= for buffers
** =add-to-list= and =append= for lists
** =mapcar= with list of results
** =mapconcat= for string of results
** =dolist= for mapc with implicit bind
** =cadr= for last item of pair, as in, =(car (cdr foo))=
** =cons= to append without copying
** =remove= to filter items from list
** =getenv=, =setenv=, =compilation-environment= for env
** =executable-find= for binaries
** =nth= and =elt= for indexing a list
** =cond= is better than =if= / =else=
** =let= and =let*= for local variables
** =save-excursion= to restore point
** =replace-regexp-in-string=
** =shell-command-to-string=
** [[https://github.com/magnars/dash.el][dash.el]] modern list library
* Key bindings
** Universal arg: =C-u=
** Negative arg: =(C|M|C-M)--= like =M- M-l= to downcase backwards
** Numeric args: =(C|M|C-M)-(0...9)=
** Repeat command: =C-x z= follow with =z=
** Jump to mark: =C-u C-SPC= (local) =C-x C-SPC= (global)
** Toggle between point and mark: =C-x C-x=
** Narrowing: =C-x n= region =n= defun =d= widen =w=
https://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html
** Zap to char: =M-z= (remapped to =zap-up-to-char=)
** Delete horizontal whitespace: =M-\= or keep one space =M-SPC=
** Delete vertical whitespace (blank lines): =C-x C-o= (like "undo =C-o=")
** Delete indendation / join line with previous: =M-^=
** Append next kill: =C-M-w=
** Back to indentation: =M-m=
** Surround with parentheses: =M-(= on region or with numeric arg
** Sexps: =C-M-(b backward) (f forward) (u up) (SPC mark) (k kill) (w copy)=
** Defuns: =C-M-(a begin) (e end) (h mark)=
** Buffer: =M-(< begin) (> end)= =C-x h (mark)=
** Magit sections: =M-(n next) (p previous)=
** Sentences: =M-(a backward) (e forward) (k kill) / C-x DEL (kill backward)=
In C and C++ modes, these move over statements.
** Paragraphs: =M-({ backward) (} forward) (h mark)=
** Transpose: =C-(char) M-(word) C-M-(sexp) t / C-x C-t (line)=
** The opposite of =C-l= is =M-r= recenter-positions
** Reposition window to see comment/function: =C-M-l=
** Comment: =M-; (DWIM) C-x C-; (line) M-j (newline comment)=
** Occur: =M-s o= then =e (edit) / M-(n next) (p previous)=
*** Also =multi-occur-in-matching-buffers=
** Search nearest symbol: =M-s .=
** Casing:
*** words =M-u (upper) l (lower) c (capitalize)=
*** regions =C-x C-(u upper) (l lower) / upcase-initials-region=
** "Close" client buffer: =C-x # (server-edit)=
** Evaluate lisp: interactive =M-:= last sexp =C-x C-e=
** Set fill prefix: =C-x .=
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Prefix.html][Fill-Prefix]] with point after prefix
** Set fill column: =C-x f=
** Toggle read-only =C-x C-q=
** Writable modes
*** occur with =e= exit
*** wgrep with =C-c C-p=
*** wdired with =C-x C-q=
*** ivy occur with =C-c C-o= then follows wgrep
See [[https://oremacs.com/2016/04/26/ivy-0.8.0/][=ivy-occur-mode=]]
** List bindings: =C-h b=
** Bindings for command: =C-h w (where-is)=
Inverse of =C-h k=
** Quote next character: =C-q=
Newline: C-j
* Tricks and tips
** Interactive Emacs Lisp Mode =ielm=
** Automatic alignment with =align-current=
Fall back to =align-regexp=. Prefix that for complex mode.
** Replace =uniq= with =delete-duplicate-lines=
*** also =flush-lines= and =keep-lines=
** Using quote marks within verbatim/code markup in org-mode
- Unicode: <U200B> /xe2/x80/x8b ZERO WIDTH SPACE
- Insert using: (C-x 8 RET 200b RET)
** Quickly insert =#+begin_src= with =<s <tab>= and =C-c C-, s=
- http://orgmode.org/org.html#Easy-Templates
- =org-insert-structure-template=
** Sudo mode using Tramp =C-x C-f /ssh:you@host|sudo:host:/file=
- http://www.emacswiki.org/emacs/TrampMode
** Replace in files
From [[https://stackoverflow.com/a/271136][StackOverflow]]:

1. M-x find-name-dired: you will be prompted for a root directory and
   a filename pattern.

2. Press t to "toggle mark" for all files found.

3. Press Q for "Query-Replace in Files...": you will be prompted for
   query/substitution regexps.

4. Proceed as with query-replace-regexp: SPACE to replace and move to
   next match, n to skip a match, etc.

5. Press Y to finish replacing in all buffers.

6. C-x C-s ! to save all buffers.

** Replace with capture regexp
- use regex groups like "ab\(c\)" where the parentheses are escaped
  because Emacs
- refer to prior capture groups by \N where N is 1-indexed on the
  captured groups (e.g. back reference)
** Renumber with regexp
- see [[http://www.emacswiki.org/emacs/RenumberList][Wiki]]; the comma indicates elisp code to evaluate
- e.g. [0-9]+ -> \,(+ 257 \#)
- or by 8 starting at 10 \,(+ 10 (* 8 \#))
** Capture all regexp matches
#+begin_src elisp
  ;; captures all non-terminals in Bison grammar
  (save-excursion
    (while (re-search-forward "^\\([a-z_]+\\):" nil t)
      (princ (format "%s " (match-string 1)) (get-buffer-create "matches"))))
#+end_src
** regexp-builder for replace
- Use =C-c C-i= and choose the "string" syntax
- Copy the regexp without the surrounding quotes
- Use =C-c C-q= to close regexp-builder
** Projectile commands
*** Project
- switch :: p
- commander :: m
- command :: !
- async :: &
- make :: c
- make test :: P
- make tags :: R
- replace :: r
- dired :: D
- vcs :: v
- ag :: ss
- tag :: j
- buffers :: b
- kill :: k
- recent :: e
*** File
- alternate :: a
- test files :: T
- toggle test :: t
** Flycheck
*** =(flycheck-compile)= for debugging
** ansi-term
- Needs [[https://stackoverflow.com/a/8920373][terminfo]]
- Remove TERM from shell's rc file
#+begin_src sh
tic -o ~/.terminfo
/usr/local/Cellar/emacs/HEAD/share/emacs/24.4.50/etc/e/eterm-color.ti
#+end_src

** Partially evaluate list elements
- (add-to-list 'somelist `(symbol . ,(expression to be evaluated)))
- The backquote is like a normal quote except it evaluates elements
  marked with commas. [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][RTFM]]
** Temporarily disable ido-completion =C-j=
** Set directory local variable =eval= to execute arbitrary code
** See current faces =list-faces-display=
** View Lossage
Use =M-x view-lossage= on =C-h l= to see the most recent 300 keystrokes, per
[[http://emacsredux.com/blog/2014/12/23/lossage/][Emacs Redux]]
** Smartparens
https://ebzzry.github.io/emacs-pairs.html
*** Yank next movement/thing =sp-select-next-thing= on =C-M-]=
*** Remove surround quotes aka splice =sp-splice-sexp= on =M-D=
** Emacs Syntax Explained
The C-j in C-q C-j is for inputing ASCII Line Feed char (used in unix
as newline char), which does not have a corresponding key on the
keyboard. The reason that C-j is for Line Feed is because it's a
notation from the ASCII standard. That is, the non-printables are
represented by a Control followed by a letter, regardless whether
there is a corresponding key on the keyboard. Line feed is the 10th
ASCII char, and j is the 10th letter, so Line Feed is C-j. Similarly,
C-i is for Horizontal Tab, C-m is for Carriage Return, C-[ is for
Escape, C-l is for Form Feed, etc.
http://ergoemacs.org/emacs/keystroke_rep.html

Setting =(flyspell-use-meta-tab nil)= unbinds =C-M-i= because it's
interpreted as =M-TAB=. This is because =C-i= and =TAB= are the same
character in ASCII. This is most annoying on Windows where =M-TAB= AKA
"alt-tab" switches windows.

https://www.gnu.org/software/emacs/elisp/html_node/Function-Keys.html

** Faces
#+begin_src elisp
  (use-package ivy
    :custom-face
    (ivy-current-match
     ((((class color) (background light))
       :background "#fdf6e3" :underline (:color "#859900"))
      (((class color) (background dark))
       :background "#002b36" :underline (:color "#859900")))))
#+end_src
* Compiling Emacs from source
See =INSTALL.REPO=
** update
#+BEGIN_SRC sh
  git clone -b emacs-26 https://github.com/emacs-mirror/emacs.git
#+END_SRC
** prepare
Can use =build-dep emacs= to get dependencies.
#+BEGIN_SRC sh
  make distclean
#+END_SRC
*** Arch
#+BEGIN_SRC sh
  sudo pacman -S texinfo libxft
  # with GTK
  sudo pacman -S gtk2 xorg-fonts-100dpi
#+END_SRC
*** CentOS 7
GTK+ and FreeType are needed to for the X11 build with proper font
rendering. See other notes for X11 and Xft setup.
#+BEGIN_SRC sh
  yum install gtk2-devel freetype gnutls-devel
#+END_SRC
*** Ubuntu 14.04
Still needs GTK and FreeType.
#+BEGIN_SRC sh
  sudo apt-get install texi2html texinfo
#+END_SRC
*** Ubuntu 18.04
#+BEGIN_SRC sh
  sudo apt build-dep emacs24
  ./autogen.sh
  ./configure --with-x-toolkit=gtk3
  export GDK_SCALE=2
#+END_SRC
*** Windows
**** Follow nt/INSTALL
- Install MinGW and MSYS (see [[http://mingw.org/wiki/Getting_Started][Getting Started]])
- Run =C:\MinGW\msys\1.0\postinstall\pi.bat= to setup =fstab=
- Add shortcut to =C:\MinGW\msys\1.0\msys.bat=
**** Fix line endings
Otherwise =autoreconf= will fail cryptically.
#+BEGIN_SRC sh
  dos2unix.exe configure.ac
#+END_SRC
** autoreconf
#+BEGIN_SRC sh
  ./autogen.sh
#+END_SRC
This runs the usual =autoreconf -i -I m4=
** configure
*** Arch
#+BEGIN_SRC sh
  ./configure --without-all --with-x-toolkit=no --with-xft --with-makeinfo
#+END_SRC
*** OS X
#+BEGIN_SRC sh
  ./configure --without-all --with-x-toolkit=no --with-ns --with-toolkit-scroll-bars --with-makeinfo
#+END_SRC
*** CentOS 7
#+BEGIN_SRC sh
  ./configure --without-all --with-xft --with-makeinfo
#+END_SRC
- [[http://www.x.org/releases/X11R7.7/doc/xorg-docs/fonts/fonts.html][XFT]] is the X11 font system, and is required.
- [[http://jmason.org/howto/subpixel.html][Sub-pixel rendering]]
*** Ubuntu 14.04
#+BEGIN_SRC sh
  ./configure --without-all --with-xft --with-makeinfo
#+END_SRC
*** Windows
Toolkit scroll-bars are required on Windows but excluded by
=--without-all=, so explicitly include them.
#+BEGIN_SRC sh
  ./configure --without-all --with-w32 --with-toolkit-scroll-bars
#+END_SRC
*** Optional
#+BEGIN_SRC sh
  --with-sound --with-gnutls --with-zlib --without-compress-install --with-libotf
#+END_SRC
** make
*** bootstrap
#+BEGIN_SRC sh
  make bootstrap
#+END_SRC
*** build docs
#+BEGIN_SRC sh
  make info doc
#+END_SRC
** install
#+BEGIN_SRC sh
  sudo make install install-info install-doc
#+END_SRC
*** OS X
Copy =nextstep/Emacs.app= to desired location
** post-install
*** Remove old packages
#+BEGIN_SRC sh
  rm -rf ~/.emacs.d/elpa
#+END_SRC
* Bugs
** Buffer content invisible when tunneling X
[[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=25474][GNU Bug Report #25474]]
#+begin_src lisp
  (setq default-frame-alist
        (append default-frame-alist '((inhibit-double-buffering . t))))
#+end_src
** =derived-mode-p= broken for aliased parents
[[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=32795][GNU Bug Report #32795]]
#+begin_src lisp
  (defun provided-mode-derived-p (mode &rest modes)
    "Non-nil if MODE is derived from one of MODES.
  Uses the `derived-mode-parent' property of the symbol to trace backwards.
  Non-nil even if MODE is derived from an alias of any of MODES.
  If you just want to check `major-mode', use `derived-mode-p'."
    (while
        (and
         (not (memq mode modes))
         (let* ((parent (get mode 'derived-mode-parent))
                (parentfn (symbol-function parent)))
           (setq mode (if (and parentfn (symbolp parentfn)) parentfn parent)))))
    mode)
#+end_src
