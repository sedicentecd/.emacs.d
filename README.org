#+TITLE: Andrew Schwartzmeyer's Emacs configurations
[[https://travis-ci.org/andschwa/.emacs.d][https://travis-ci.org/andschwa/.emacs.d.svg?branch=master]]

Utilizes [[https://github.com/jwiegley/use-package][jwiegley's use-package]] macro to cleanly and quickly require,
install via [[https://github.com/raxod502/straight.el][straight.el]], and setup various extensions. Tries to get
back to the basics, and so is loosely based on [[https://masteringemacs.org/][Mastering Emacs]].

These configurations work a lot better with at least Emacs 26,
although Emacs 25 should be supported, and I tend to build from source
so I can apply my [[https://github.com/emacs-mirror/emacs/commit/48ff4c0b2f78f1812fa12e3a56ee5f2a0bc712f7#diff-3b23fdba3dbc1527e9de42e7d7f14bbc][patch]].

This readme is currently going through a rewrite.

* Notable packages

This is not an exhaustive list, just the ones I have found the most
useful.

- [[https://github.com/jscheid/dtrt-indent][dtrt-indent]] intelligently guesses indentation rules
- [[https://github.com/abo-abo/swiper][ivy and counsel]] for enhanced command completions
- [[https://github.com/magit/magit][magit]] is the best way to interact with Git
- [[https://github.com/tarsius/hl-todo][hl-todo]] highlights TODOs in source code
- [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]] makes the mode readable and useful
- [[https://github.com/bbatsov/solarized-emacs][solarized-emacs]] is the color theme
- [[https://github.com/jwiegley/use-package][use-package]] organizes =init.el= and manages packages
- [[https://github.com/justbur/emacs-which-key][which-key]] makes keybindings actually discoverable
- [[https://github.com/lewang/ws-butler][whitespace-butler]] unobtrusively cleans up whitespace

* Using Emacs

** Interactive arguments

Negative and numeric arguments can be used to perform actions like
with vi's composable grammar. That is, =3dd= in vi is equivalent to
=C-3 C-k=, and =3k= is =C-3 C-p=. I am not sure if vi has an
equivalent to the negative argument: it is used to do things
backwards, that is, =M-- M-l= will downcase the word _before_ the
point instead of after, and =C-M-- C-M-SPC= will mark the previous
sexp instead of the next.

As you may have noticed, the negative and numeric arguments are bound
to control, meta, and control-meta so that they can be easily combined
with any other binding. You can type any number as a numeric argument.
For example, =C-SPC C-1 C-3 C-n= marks the next 13 lines.

In my opinion, the only real difference between the two grammars is
that in vi, you have to explicitly change modes with =ESC=, and with
Emacs, you temporarily change modes with modifier key chords (control
and alt/meta).

The strange argument is =C-u= for "universal" argument (also known as
the "prefix" argument). Technically it is equivalent to =C-4=, but it
is not usually used for this. Instead, interactive functions often
have alternative modes of operation, and the use of the universal
argument will toggle these. It is usually used after reading the
documentation of a function, and then promptly forgotten. The only
common use I can think of is =C-u C-SPC=, as a single prefix argument
to =set-mark-command= causes it to pop the local mark ring (jump back
to last marked spot in the buffer, like =C-x C-SPC= but not global).

Note that unlike the numeric and negative arguments, the universal
argument is only on =C-u=. That is, =M-u= and =C-M-u= are bound to
completely different commands.

See [[http://ergoemacs.org/emacs_manual/emacs/Arguments.html][ErgoEmacs]].

** Repeating commands

While numeric arguments can repeat a command N times, you have to
specify it before calling the command. Often you realize _after_
calling a command that it needs to be repeated, which you can do with
=C-x z= (bound to =repeat=). This is equivalent to vi's =.= command.
After the first invocation, =z= can be used for more repetitions. It
also repeats the arguments used originally.

More complex commands are repeatable with =repeat-complex-command=,
annoyingly bound to =C-x M-:=. Complex commands are those used in the
minibuffer which take interactive input (like =query-replace=).

See [[https://masteringemacs.org/article/repeating-commands-emacs][Mastering Emacs]].

** Keyboard macros

When a more advanced action needs to be repeated, Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html][keyboard
macros]] are awesome! To start recording a macro, use =C-x (=, to finish
recording a macro, use =C-x )=, and to run the last recorded macro,
use =C-x e=. That last command will also automatically finish
recording a macro, and can be repeated with just =e=.

The rest of the useful =kmacro= functions are bound to the prefix =C-x
C-k=. If =C-x (= is annoying, =C-x C-k s= is also bound and is a bit
more mnemonic ("execute kmacro start").

When recording a macro, be careful not to quit by accident or with
=C-g=, as this cancels the recording! I usually run into this when
trying to cancel an =isearch=, and then have to start recording again.
Instead, use =RET= to end (not quit) the search, and then use =C-u
C-SPC= to pop the mark back to where you were. It is also a problem
when deactivating a marked region. Instead of =C-g=, use =C-SPC C-SPC=
to set and then deactivate the mark.

If a mistake is made when recording, use =C-/= to undo. It will work
just fine when applying the macro.

Writing useful macros means using syntactic movements instead of
characters, so that the macro works regardless of textual differences.
The most useful movements are =C-s=, =C-a=, and =C-e=, but also useful
are word and expression commands.

To apply a macro to all lines in a region, use =C-x C-k r=. To
repeatedly apply a macro until an error occurs (like reaching the end
of the buffer, or no more search results), use =C-0 C-x e=.

Macros can be saved by naming them with =C-x C-k n= and then saved
permanently by writing their lisp code with =insert-kbd-macro= (or
just view the last macro with =kmacro-view-macro=).

See [[http://ergoemacs.org/emacs/emacs_macro_example.html][ErgoEmacs]].

** Mark rings

The mark rings are used for recording positions in buffers. The global
mark ring records the latest mark for each buffer, and each buffer's
local mark ring records the marks for that buffer. So the global mark
ring essentially records your buffer switching history (with the
helpful context of _where_ in the buffer you were), and the local mark
ring records your position history in each buffer.

Use =C-x C-SPC= to pop the global mark to go back after jumping into
another buffer, such as when finding a definition with =M-.=, although
there is also a mark ring for =xref= which you can pop with =M-,=.

Use =C-u C-SPC= to pop the local mark after jumping around in a
buffer, such as when using =C-s=. Note that while typing text moves
the _point_ (or cursor) forward, it does not move the mark. Instead,
this happens with commands that "jump," or with =C-SPC C-SPC= to
manually set and then deactivate the mark. Think of the mark as a
bookmark of the point, but not the point itself.

When =set-mark-command-repeat-pop= is enabled, the mark can be
repeatedly popped by hitting =C-SPC= after first popping the global or
local mark ring.

An obscure but useful command is =C-x C-x=, which exchanges the point
and mark. When a region is marked, =C-x C-x= moves between the
beginning and end of that region. If the region is not yet marked, it
will mark the region between the point and previous mark. You can
avoid marking the region and instead only move the point with the
prefix argument, so =C-u C-x C-x=. This command is super useful when
using the =rectangle= commands (on =C-x r=) as the exact region
matters.

My configuration turns on =transient-mark-mode=, enables
=set-mark-command-repeat-pop=, and increases the size of the mark
rings such that you probably won't exhaust them. The large mark rings
makes it possible to pop way back to an earlier context, but means it
is practically impossible to cycle through the ring.

** Deleting whitespace

Delete all horizontal whitespace around the point on the current line
with =M-\=. Use =M-- M-\= to only delete the space backwards.

When a single space is desired (often the case after deleting some
words), use =M-SPC=. The negative argument will delete newlines too,
and numeric arguments keep N spaces. So =M-- M-SPC= is really useful
to join text below the point separated by whitespace to the point on
the same line after a space.

You can delete blank lines (vertical whitespace) with =C-x C-o=, which
is mnemonic since =C-o= inserts a newline. Use it on a non-blank line
to join text below the point separated by whitespace, but with a
newline in between instead of on the same line. Use it on a blank line
to keep just one line (like =M-SPC= but for lines). Use it again on a
single blank line to delete it.

You can join text at the point to the _line above the point_ with
=M-^=, which calls =delete-indentation=, so named because it also
fixes up the whitespace at the join. The negative argument instead
joins to the line below the point, essentially turning it into the
commands above. I do not find this command as useful as the others.

Also of interest is the unbound command =cycle-spacing=, which
manipulates whitespace "intelligently." I do not use it yet, but it
seems like a good replacement for =just-one-space=.

** Narrowing: =C-x n= region =n= defun =d= widen =w=
https://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html
** Zap to char: =M-z= (remapped to =zap-up-to-char=)
** Append next kill: =C-M-w=
** Back to indentation: =M-m=
** Surround with parentheses: =M-(= on region or with numeric arg
** Sexps: =C-M-(b backward) (f forward) (u up) (SPC mark) (k kill) (w copy)=
** Defuns: =C-M-(a begin) (e end) (h mark)=
** Buffer: =M-(< begin) (> end)= =C-x h (mark)=
** Magit sections: =M-(n next) (p previous)=
** Sentences: =M-(a backward) (e forward) (k kill) / C-x DEL (kill backward)=
In C and C++ modes, these move over statements.
** Paragraphs: =M-({ backward) (} forward) (h mark)=
** Transpose: =C-(char) M-(word) C-M-(sexp) t / C-x C-t (line)=
** The opposite of =C-l= is =M-r= recenter-positions
** Reposition window to see comment/function: =C-M-l=
** Comment: =M-; (DWIM) C-x C-; (line) M-j (newline comment)=
** Occur: =M-s o= then =e (edit) / M-(n next) (p previous)=
*** Also =multi-occur-in-matching-buffers=
** Search nearest symbol: =M-s .=
** Casing:
*** words =M-u (upper) l (lower) c (capitalize)=
*** regions =C-x C-(u upper) (l lower) / upcase-initials-region=
** "Close" client buffer: =C-x # (server-edit)=
** Evaluate lisp: interactive =M-:= last sexp =C-x C-e=
** Set fill prefix: =C-x .=
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Prefix.html][Fill-Prefix]] with point after prefix
** Set fill column: =C-x f=
** Toggle read-only =C-x C-q=
** Writable modes
*** occur with =e= exit
*** wgrep with =C-c C-p=
*** wdired with =C-x C-q=
*** ivy occur with =C-c C-o= then follows wgrep
See [[https://oremacs.com/2016/04/26/ivy-0.8.0/][=ivy-occur-mode=]]
** List bindings: =C-h b=
** Bindings for command: =C-h w (where-is)=
Inverse of =C-h k=
** Quote next character: =C-q=
Newline: C-j
* Tricks and tips
** Interactive Emacs Lisp Mode =ielm=
** Automatic alignment with =align-current=
Fall back to =align-regexp=. Prefix that for complex mode.
** Replace =uniq= with =delete-duplicate-lines=
*** also =flush-lines= and =keep-lines=
** Using quote marks within verbatim/code markup in org-mode
- Unicode: <U200B> /xe2/x80/x8b ZERO WIDTH SPACE
- Insert using: (C-x 8 RET 200b RET)
** Quickly insert =#+begin_src= with =<s <tab>= and =C-c C-, s=
- http://orgmode.org/org.html#Easy-Templates
- =org-insert-structure-template=
** Sudo mode using Tramp =C-x C-f /ssh:you@host|sudo:host:/file=
- http://www.emacswiki.org/emacs/TrampMode
** Replace in files
From [[https://stackoverflow.com/a/271136][StackOverflow]]:

1. M-x find-name-dired: you will be prompted for a root directory and
   a filename pattern.

2. Press t to "toggle mark" for all files found.

3. Press Q for "Query-Replace in Files...": you will be prompted for
   query/substitution regexps.

4. Proceed as with query-replace-regexp: SPACE to replace and move to
   next match, n to skip a match, etc.

5. Press Y to finish replacing in all buffers.

6. C-x C-s ! to save all buffers.

** Replace with capture regexp
- use regex groups like "ab\(c\)" where the parentheses are escaped
  because Emacs
- refer to prior capture groups by \N where N is 1-indexed on the
  captured groups (e.g. back reference)
** Renumber with regexp
- see [[http://www.emacswiki.org/emacs/RenumberList][Wiki]]; the comma indicates elisp code to evaluate
- e.g. [0-9]+ -> \,(+ 257 \#)
- or by 8 starting at 10 \,(+ 10 (* 8 \#))
** Capture all regexp matches
#+begin_src elisp
  ;; captures all non-terminals in Bison grammar
  (save-excursion
    (while (re-search-forward "^\\([a-z_]+\\):" nil t)
      (princ (format "%s " (match-string 1)) (get-buffer-create "matches"))))
#+end_src
** regexp-builder for replace
- Use =C-c C-i= and choose the "string" syntax
- Copy the regexp without the surrounding quotes
- Use =C-c C-q= to close regexp-builder
** Projectile commands
*** Project
- switch :: p
- commander :: m
- command :: !
- async :: &
- make :: c
- make test :: P
- make tags :: R
- replace :: r
- dired :: D
- vcs :: v
- ag :: ss
- tag :: j
- buffers :: b
- kill :: k
- recent :: e
*** File
- alternate :: a
- test files :: T
- toggle test :: t
** Flycheck
*** =(flycheck-compile)= for debugging
** ansi-term
- Needs [[https://stackoverflow.com/a/8920373][terminfo]]
- Remove TERM from shell's rc file
#+begin_src sh
tic -o ~/.terminfo
/usr/local/Cellar/emacs/HEAD/share/emacs/24.4.50/etc/e/eterm-color.ti
#+end_src

** Partially evaluate list elements
- (add-to-list 'somelist `(symbol . ,(expression to be evaluated)))
- The backquote is like a normal quote except it evaluates elements
  marked with commas. [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][RTFM]]
** Temporarily disable ido-completion =C-j=
** Set directory local variable =eval= to execute arbitrary code
** See current faces =list-faces-display=
** View Lossage
Use =M-x view-lossage= on =C-h l= to see the most recent 300 keystrokes, per
[[http://emacsredux.com/blog/2014/12/23/lossage/][Emacs Redux]]
** Smartparens
https://ebzzry.github.io/emacs-pairs.html
*** Yank next movement/thing =sp-select-next-thing= on =C-M-]=
*** Remove surround quotes aka splice =sp-splice-sexp= on =M-D=
** Emacs Syntax Explained
The C-j in C-q C-j is for inputing ASCII Line Feed char (used in unix
as newline char), which does not have a corresponding key on the
keyboard. The reason that C-j is for Line Feed is because it's a
notation from the ASCII standard. That is, the non-printables are
represented by a Control followed by a letter, regardless whether
there is a corresponding key on the keyboard. Line feed is the 10th
ASCII char, and j is the 10th letter, so Line Feed is C-j. Similarly,
C-i is for Horizontal Tab, C-m is for Carriage Return, C-[ is for
Escape, C-l is for Form Feed, etc.
http://ergoemacs.org/emacs/keystroke_rep.html

Setting =(flyspell-use-meta-tab nil)= unbinds =C-M-i= because it's
interpreted as =M-TAB=. This is because =C-i= and =TAB= are the same
character in ASCII. This is most annoying on Windows where =M-TAB= AKA
"alt-tab" switches windows.

https://www.gnu.org/software/emacs/elisp/html_node/Function-Keys.html

** Faces
#+begin_src elisp
  (use-package ivy
    :custom-face
    (ivy-current-match
     ((((class color) (background light))
       :background "#fdf6e3" :underline (:color "#859900"))
      (((class color) (background dark))
       :background "#002b36" :underline (:color "#859900")))))
#+end_src
* Emacs lisp programming notes
- =add-hook= and =eval-after-load= for conditional execution
- =expand-file-name= and =f-expand= for filename expansion
- =file-name-basename= and =file-name-nondirectory= etc.
- =message= and =princ= for printing
- =concat= and =format= for strings
- =get-buffer-create= for buffers
- =add-to-list= and =append= for lists
- =mapcar= with list of results
- =mapconcat= for string of results
- =dolist= for mapc with implicit bind
- =cadr= for last item of pair, as in, =(car (cdr foo))=
- =cons= to append without copying
- =remove= to filter items from list
- =getenv=, =setenv=, =compilation-environment= for env
- =executable-find= for binaries
- =nth= and =elt= for indexing a list
- =cond= is better than =if= / =else=
- =let= and =let*= for local variables
- =save-excursion= to restore point
- =replace-regexp-in-string=
- =shell-command-to-string=
- [[https://github.com/magnars/dash.el][dash.el]] modern list library
* Compiling Emacs from source
See =INSTALL.REPO=
** update
#+BEGIN_SRC sh
  git clone -b emacs-26 https://github.com/emacs-mirror/emacs.git
#+END_SRC
** prepare
Can use =build-dep emacs= to get dependencies.
#+BEGIN_SRC sh
  make distclean
#+END_SRC
*** Arch
#+BEGIN_SRC sh
  sudo pacman -S texinfo libxft
  # with GTK
  sudo pacman -S gtk2 xorg-fonts-100dpi
#+END_SRC
*** CentOS 7
GTK+ and FreeType are needed to for the X11 build with proper font
rendering. See other notes for X11 and Xft setup.
#+BEGIN_SRC sh
  yum install gtk2-devel freetype gnutls-devel
#+END_SRC
*** Ubuntu 14.04
Still needs GTK and FreeType.
#+BEGIN_SRC sh
  sudo apt-get install texi2html texinfo
#+END_SRC
*** Ubuntu 18.04
#+BEGIN_SRC sh
  sudo apt build-dep emacs24
  ./autogen.sh
  ./configure --with-x-toolkit=gtk3
  export GDK_SCALE=2
#+END_SRC
*** Windows
**** Follow nt/INSTALL
- Install MinGW and MSYS (see [[http://mingw.org/wiki/Getting_Started][Getting Started]])
- Run =C:\MinGW\msys\1.0\postinstall\pi.bat= to setup =fstab=
- Add shortcut to =C:\MinGW\msys\1.0\msys.bat=
**** Fix line endings
Otherwise =autoreconf= will fail cryptically.
#+BEGIN_SRC sh
  dos2unix.exe configure.ac
#+END_SRC
** autoreconf
#+BEGIN_SRC sh
  ./autogen.sh
#+END_SRC
This runs the usual =autoreconf -i -I m4=
** configure
*** Arch
#+BEGIN_SRC sh
  ./configure --without-all --with-x-toolkit=no --with-xft --with-makeinfo
#+END_SRC
*** OS X
#+BEGIN_SRC sh
  ./configure --without-all --with-x-toolkit=no --with-ns --with-toolkit-scroll-bars --with-makeinfo
#+END_SRC
*** CentOS 7
#+BEGIN_SRC sh
  ./configure --without-all --with-xft --with-makeinfo
#+END_SRC
- [[http://www.x.org/releases/X11R7.7/doc/xorg-docs/fonts/fonts.html][XFT]] is the X11 font system, and is required.
- [[http://jmason.org/howto/subpixel.html][Sub-pixel rendering]]
*** Ubuntu 14.04
#+BEGIN_SRC sh
  ./configure --without-all --with-xft --with-makeinfo
#+END_SRC
*** Windows
Toolkit scroll-bars are required on Windows but excluded by
=--without-all=, so explicitly include them.
#+BEGIN_SRC sh
  ./configure --without-all --with-w32 --with-toolkit-scroll-bars
#+END_SRC
*** Optional
#+BEGIN_SRC sh
  --with-sound --with-gnutls --with-zlib --without-compress-install --with-libotf
#+END_SRC
** make
*** bootstrap
#+BEGIN_SRC sh
  make bootstrap
#+END_SRC
*** build docs
#+BEGIN_SRC sh
  make info doc
#+END_SRC
** install
#+BEGIN_SRC sh
  sudo make install install-info install-doc
#+END_SRC
*** OS X
Copy =nextstep/Emacs.app= to desired location
** post-install
*** Remove old packages
#+BEGIN_SRC sh
  rm -rf ~/.emacs.d/elpa
#+END_SRC
* Bugs
** Buffer content invisible when tunneling X
[[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=25474][GNU Bug Report #25474]]
#+begin_src lisp
  (setq default-frame-alist
        (append default-frame-alist '((inhibit-double-buffering . t))))
#+end_src
** =derived-mode-p= broken for aliased parents
[[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=32795][GNU Bug Report #32795]]
#+begin_src lisp
  (defun provided-mode-derived-p (mode &rest modes)
    "Non-nil if MODE is derived from one of MODES or their aliases.
  Uses the `derived-mode-parent' property of the symbol to trace backwards.
  If you just want to check `major-mode', use `derived-mode-p'."
    (while
        (and
         (not (memq mode modes))
         (let* ((parent (get mode 'derived-mode-parent))
                (parentfn (symbol-function parent)))
           (setq mode (if (and parentfn (symbolp parentfn)) parentfn parent)))))
    mode)
#+end_src
** Installing =org-mode= with =straight.el=
There is a [[https://github.com/raxod502/straight.el#installing-org-with-straightel][known bug]] when installing =org-mode= with =straight.el=. I
have not applied the workaround because the bug is pretty much just
cosmetic.
